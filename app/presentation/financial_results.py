"""
M√≥dulo para presentar resultados financieros a los agricultores
con lenguaje simple y acorde a su contexto cultural.
"""
from typing import Dict, Any, Tuple, List
import logging
from app.utils.currency import format_currency
from app.scoring.credit_score import score_calculator

logger = logging.getLogger(__name__)

class FinancialResultsPresenter:
    """
    Presenta los resultados financieros y de puntuaci√≥n
    de manera amigable para agricultores guatemaltecos.
    """
    
    def __init__(self):
        # Recomendaciones espec√≠ficas por categor√≠a
        self.recommendations = {
            'cultivo': {
                'bajo': (
                    "Los cultivos como el aguacate ü•ë, caf√© ‚òï o cardamomo rinden "
                    "mejores ganancias que los cultivos tradicionales."
                ),
                'medio': (
                    "Su cultivo actual tiene buen potencial. Podr√≠a considerar "
                    "diversificar con otros cultivos complementarios üå±."
                ),
                'alto': (
                    "¬°Excelente elecci√≥n de cultivo! Tiene muy buen valor en el mercado üëç."
                )
            },
            'area': {
                'bajo': (
                    "Aumentar el √°rea de siembra le permitir√≠a mejorar sus ingresos. "
                    "¬øHa considerado alquilar m√°s terreno? üåæ"
                ),
                'medio': (
                    "El tama√±o de su terreno es adecuado. Enf√≥quese en mejorar el rendimiento "
                    "por cuerda para maximizar ganancias üìà."
                ),
                'alto': (
                    "¬°Tiene una extensi√≥n de tierra muy favorable! Esto le permite "
                    "planificar bien sus siembras."
                )
            },
            'comercializacion': {
                'bajo': (
                    "Vender directamente a mercados locales limita sus ganancias. "
                    "¬øHa considerado unirse a una cooperativa? ü§ù"
                ),
                'medio': (
                    "Trabajar con mayoristas es bueno. La pr√≥xima vez, intente negociar "
                    "mejores precios mostrando la calidad de su producto üöö."
                ),
                'alto': (
                    "¬°Excelente canal de venta! La exportaci√≥n y venta organizada "
                    "le aseguran los mejores precios del mercado üí∞."
                )
            },
            'riego': {
                'bajo': (
                    "Depender solo de la lluvia es riesgoso. Un sistema de riego simple "
                    "podr√≠a ayudarle a sembrar todo el a√±o üíß."
                ),
                'medio': (
                    "Su sistema de riego actual es bueno. Mantenerlo en buen estado "
                    "es importante para asegurar su cosecha üåä."
                ),
                'alto': (
                    "¬°Su sistema de riego es excelente! Esto asegura buenas cosechas "
                    "incluso en √©poca seca üëè."
                )
            },
            'ubicacion': {
                'bajo': (
                    "Su zona tiene algunos desaf√≠os para la agricultura. Consulte con el "
                    "t√©cnico agr√≠cola sobre cultivos m√°s resistentes üßë‚Äçüåæ."
                ),
                'medio': (
                    "Su ubicaci√≥n tiene buen potencial agr√≠cola. Aproveche los programas "
                    "de asistencia t√©cnica disponibles en su regi√≥n üó∫Ô∏è."
                ),
                'alto': (
                    "¬°Est√° en una de las mejores zonas agr√≠colas! Su ubicaci√≥n favorece "
                    "cultivos de alta calidad ‚ú®."
                )
            }
        }
        
    def get_category_level(self, category: str, score: int) -> str:
        """
        Determina el nivel de una categor√≠a basado en su puntaje
        
        Args:
            category: Nombre de la categor√≠a
            score: Puntaje obtenido
            
        Returns:
            Nivel (bajo, medio, alto)
        """
        # Determinar umbrales seg√∫n la categor√≠a
        if category == 'cultivo':
            if score < 120:
                return 'bajo'
            elif score < 160:
                return 'medio'
            else:
                return 'alto'
        elif category == 'area':
            if score < 120:
                return 'bajo'
            elif score < 160:
                return 'medio'
            else:
                return 'alto'
        elif category == 'comercializacion':
            if score < 130:
                return 'bajo'
            elif score < 180:
                return 'medio'
            else:
                return 'alto'
        elif category == 'riego':
            if score < 120:
                return 'bajo'
            elif score < 200:
                return 'medio'
            else:
                return 'alto'
        elif category == 'ubicacion':
            if score < 100:
                return 'bajo'
            elif score < 130:
                return 'medio'
            else:
                return 'alto'
        else:
            return 'medio'  # Valor por defecto
    
    def get_recommendations(self, score_details: Dict[str, int], user_data: Dict[str, Any]) -> List[str]:
        """
        Genera recomendaciones personalizadas basadas en los puntajes
        
        Args:
            score_details: Detalle de puntajes por categor√≠a
            user_data: Datos completos del usuario
            
        Returns:
            Lista de recomendaciones
        """
        recommendations = []
        
        # Obtener los datos del usuario para personalizar recomendaciones
        crop = user_data.get('crop', '').lower()
        irrigation = user_data.get('irrigation', '').lower()
        area = float(user_data.get('area', 0))
        channel = user_data.get('channel', '').lower()
        
        # Recomendaci√≥n espec√≠fica para sistema de riego
        if irrigation == 'temporal':
            recommendations.append(
                "Depender solo de la lluvia es riesgoso. Un sistema de riego simple "
                "podr√≠a ayudarle a sembrar todo el a√±o üíß."
            )
        
        # Recomendaci√≥n espec√≠fica para cultivo (solo si no tiene cultivos de alto valor)
        if crop not in ['aguacate', 'cafe', 'caf√©', 'cardamomo', 'macadamia']:
            recommendations.append(
                "Los cultivos como el aguacate ü•ë, caf√© ‚òï o cardamomo rinden "
                "mejores ganancias que los cultivos tradicionales."
            )
        
        # Recomendaci√≥n para el √°rea (si es peque√±a)
        if area < 3 and len(recommendations) < 2:
            recommendations.append(
                "Aumentar el √°rea de siembra le permitir√≠a mejorar sus ingresos. "
                "Con un pr√©stamo podr√≠a expandir su producci√≥n üå±."
            )
        
        # Recomendaci√≥n para comercializaci√≥n (si vende local)
        if channel == 'mercado_local' and len(recommendations) < 2:
            recommendations.append(
                "Vender directamente a mercados locales limita sus ganancias. "
                "¬øHa considerado unirse a una cooperativa? ü§ù"
            )
        
        # Si no hay recomendaciones, incluir una general
        if not recommendations:
            recommendations.append(
                "Su perfil agr√≠cola es muy s√≥lido. Para mejorar a√∫n m√°s, "
                "considere nuevas tecnolog√≠as o m√©todos de cultivo üåü."
            )
        
        # Limitar a 2 recomendaciones
        return recommendations[:2]

    def format_financial_analysis(self, user_data: Dict[str, Any]) -> str:
        """
        Genera un an√°lisis financiero formateado para WhatsApp
        
        Args:
            user_data: Datos del usuario con informaci√≥n completa
            
        Returns:
            Mensaje formateado para WhatsApp
        """
        try:
            from app.utils.loan_calculator import calculate_loan_amount
            
            # Calcular Fingro Score
            score, score_details = score_calculator.calculate_fingro_score(user_data)
            status, message = score_calculator.get_loan_approval_status(score)
            
            # Obtener recomendaciones personalizadas
            recommendations = self.get_recommendations(score_details, user_data)
            
            # Obtener √°rea y calcular monto de pr√©stamo seg√∫n tarifas predeterminadas
            area = float(user_data.get('area', 1))
            max_loan = calculate_loan_amount(area)
            
            # Redondear a miles m√°s cercanos para simplicidad
            max_loan = round(max_loan / 1000) * 1000
            
            # Formatear mensaje seg√∫n el estado de aprobaci√≥n
            crop_name = user_data.get('crop', 'cultivo').capitalize()
            
            # Mensaje base dependiendo del status de aprobaci√≥n
            if status == "APROBADO":  # Aprobaci√≥n inmediata
                analysis = f"""
üìä *An√°lisis de su proyecto de {crop_name}*

*¬°Felicitaciones! Su Fingro Score es: {score} puntos* ‚ú®
Usted tiene un excelente perfil para aplicar a un pr√©stamo. Su proyecto agr√≠cola muestra un alto potencial de √©xito.

*Monto m√°ximo disponible: {format_currency(max_loan)}*
Este monto est√° calculado para su √°rea de {area} {'hect√°rea' if area == 1 else 'hect√°reas'} de {crop_name}.

¬øLe interesa aplicar a este pr√©stamo? üìù

Responda *S√ç* para continuar o *NO* para finalizar.
"""
            elif status == "EVALUACI√ìN":  # Evaluaci√≥n manual
                analysis = f"""
üìä *An√°lisis de su proyecto de {crop_name}*

*Su Fingro Score es: {score} puntos*
{message}

*Monto m√°ximo recomendado: {format_currency(max_loan)}*
Este monto est√° calculado para su √°rea de {area} {'hect√°rea' if area == 1 else 'hect√°reas'} de {crop_name}.

*Recomendaciones para mejorar:*
"""
                # Agregar recomendaciones
                for i, recommendation in enumerate(recommendations, 1):
                    analysis += f"{i}. {recommendation}\n"
                
                analysis += f"""
¬øLe interesa aplicar a este pr√©stamo de hasta {format_currency(max_loan)}? üìù

Responda *S√ç* para continuar o *NO* para finalizar.
"""

            else:  # Rechazo con recomendaciones
                analysis = f"""
üìä *An√°lisis de su proyecto de {crop_name}*

*Su Fingro Score es: {score} puntos*
{message}

*Recomendaciones para mejorar su perfil agr√≠cola:*
"""
                # Agregar recomendaciones
                for i, recommendation in enumerate(recommendations, 1):
                    analysis += f"{i}. {recommendation}\n"
                
                analysis += f"""
Puede volver a solicitar su pr√©stamo cuando haya implementado estas mejoras. Tambi√©n ofrecemos asesor√≠a digital gratuita en www.fingro.gt/recursos para ayudarle a mejorar su proyecto.

¬øDesea recibir informaci√≥n adicional sobre c√≥mo mejorar su puntaje? üìö

Responda *S√ç* para recibir recursos o *NO* para finalizar.
"""
            
            return analysis
            
        except Exception as e:
            logger.error(f"Error generando an√°lisis financiero: {str(e)}")
            # Mensaje gen√©rico en caso de error
            return (
                "üìä *An√°lisis de su proyecto agr√≠cola*\n\n"
                "Hemos revisado su informaci√≥n y podemos ofrecerle financiamiento "
                "para su proyecto. ¬øLe interesa continuar con la solicitud? üìù\n\n"
                "Responda *S√ç* para recibir su aplicaci√≥n o *NO* para finalizar."
            )

# Instancia global del presentador
financial_presenter = FinancialResultsPresenter()
